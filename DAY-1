TERNERY OPERATOR:
The ternary operator in JavaScript is a concise way to perform conditional logic. It‚Äôs also known as the *conditional operator*.
Syntax: condition ? expressionIfTrue : expressionIfFalse;
Common Use Cases:
  1. Simple Value Assignment
     let isMember = true;
     let fee = isMember ? "$0.00" : "$5.00";
     console.log(fee); // "$0.00"
 2. Inline in JSX (React Example)
    const message = isLoggedIn ? "Welcome back!" : "Please log in.";
 3.Calling Functions
    let isAdmin = true;
    isAdmin ? grantAccess() : denyAccess();
Nested Ternary Operator in JavaScript:
Nested ternary operators allow you to evaluate multiple conditions inline, but use with caution ‚Äî it can get hard to read!
Syntax :condition1 ? value1
       : condition2 ? value2
       : condition3 ? value3
       : defaultValue;



CONDITIONAL STATEMENTS:
Conditional statements in JavaScript are used to perform different actions based on different conditions.
 1. if Statement
 2. if...else Statement
 3. if...else if...else Statement
 4. Ternary Operator (? :)
 5. switch Statement

 1. if Statement:
  Executes a block of code if a specified condition is true.
   example:
   let age = 18;
   if (age >= 18) {
     console.log("You are an adult.");
   }
 2. if...else Statement
   Executes one block of code if the condition is true, another if it is false.
   let age = 16;
   if (age >= 18) {
    console.log("You are an adult.");
   } else {
     console.log("You are a minor.");
   }
 3. if...else if...else Statement 
   Checks multiple conditions in sequence.
   let score = 75;
   if (score >= 90) {
     console.log("Grade: A");
   } else if (score >= 80) { 
     console.log("Grade: B");
   } else if (score >= 70) {
     console.log("Grade: C");
   } else {
     console.log("Grade: F");
   }
4.Ternary Operator (? :)
  A shorthand for if...else.
  let age = 20;
  let status = (age >= 18) ? "adult" : "minor";
  console.log(status);
5.switch Statement
  Selects one of many code blocks to be executed.
  example:
  let day = "Tuesday";
  switch (day) {
    case "Monday":
      console.log("Start of the week.");
      break;
    case "Tuesday":
      console.log("Second day of the week.");
      break;
    case "Friday":
      console.log("Weekend is near!");
      break;
    default:
      console.log("Just another day.");
}




LOOPS (while , do-while , for , forEach , for...of)
 Loops in JavaScript are used to execute a block of code repeatedly, as long as a specified condition is true or for iterating over data structures like arrays.
  1. while Loop
  2. do...while Loop
  3. for Loop
  4. forEach() Method (Array method)
  5. for...of Loop
  6. for...in Loop (‚ö†Ô∏è Mostly for objects)

 üîÅ 1. while Loop
  Executes a block of code as long as the condition is true.
   let i = 0;
    while (i < 5) {
       console.log(i);
       i++;
    }

  üîÅ 2. do...while Loop
    Executes the block at least once, then repeats as long as the condition is true.
      let i = 0;
      do {
        console.log(i);
        i++;
      } while (i < 5);

  üîÅ 3. for Loop
    Used when you know how many times you want to loop.
       for (let i = 0; i < 5; i++) {
     console.log(i);
   }

   üîÅ 4. forEach() Method (Array method)
     Used to execute a function on each item in an array. You cannot break out of it with break.
      let fruits = ["apple", "banana", "cherry"]; 
      fruits.forEach(function(fruit, index) {
      console.log(index + ": " + fruit);
      });
      Or with arrow function:
        fruits.forEach((fruit, index) => console.log(index + ": " + fruit));

   üîÅ 5. for...of Loop
     Used to loop through the values of iterable objects like arrays, strings, etc.
     let fruits = ["apple", "banana", "cherry"];
      for (let fruit of fruits) {
      console.log(fruit);
      }

    6.for...in Loop (‚ö†Ô∏è Mostly for objects)
       Used to loop through object properties.
       let person = { name: "Alice", age: 25, city: "Paris" };
       for (let key in person) {
        console.log(key + ": " + person[key]);
        }






  
